# HOW TO BUILD (A) LIBRAR-Y/IES FROM A MODULE
# Building libraries from modules should be consistent for each module.
# Use the following scheme for each new library created:
#
# a) Check for required libraries. If they are not available return False and export flags if needed
# b) Define the src-subdirectories for which the library should be compiled
#    and glob all files in there
# c) Define a [LIBRARY]_options variable for the library containing all dependencies
#    from other libraries. Create a clone from the master environment and add those options.
# d) WINDOWS ONLY: Create a header file which implements dll interface functionality
#    dependent from a [LIBRARY]_DLL define. If the define is set, the dll should be exported,
#    if not, the dll should be imported. Set the define in the preprocessor options for the environment.
# e) Build the library!
# f) Remove all entries for (at least) the LIBS and LIBPATH keys in the options and
#    add only the newly-compiled library as a dependcy. This will avoid multiple includes
#    of libraries. Also verify that the import/export-switch define is not set.
# g) Export the options so that other libraries can base on this library. 
# h) Optionally setup help and ide projects
#
# The use of options and possibility to export them makes hierarchical build environments
# obsolete. Avoid exporting new environments to the build system.

import sys
import os.path

have_utcore = False

Import( '*' )

# a)
if not have_utcore:
	print "utcore missing -- not building dataflow libraries"
	have_utdataflow = False
	Export( 'have_utdataflow' )
	Return( 'have_utdataflow' )

# b)
subdirs = [ '..', os.path.join ('..', 'utGraph')  , os.path.join ( '..', 'utClientServer') ]
headers = globSourceFiles( '*.h' )
sources = globSourceFiles( '*.cpp' )
for dir in subdirs:
	headers += globSourceFiles( dir + '/*.h' )
	sources += globSourceFiles( dir + '/*.cpp' )


# c)	
extra_options = {}
extra_options[ 'LIBS' ] = boost_libs( [ 'thread', 'system', 'filesystem', 'regex' ] )
utdataflow_options = mergeOptions( utcore_all_options, extra_options)
utdataflow_options ['CPPPATH'] += [ os.path.join (getCurrentPath(), '..')  ]

env = masterEnv.Clone()
env.AppendUnique( **utdataflow_options )

# c)
if sys.platform == 'win32':
	env.Append( CPPDEFINES = 'UTDATAFLOW_DLL' )

# e)	
# compile all source files into single library
# {buildenvironment, source files, name of the library, build target}
libs = setupLibraryBuild(env, sources, 'utDataflow', 'dataflow')

# f)
utdataflow_all_options = utdataflow_options.copy()
utdataflow_options[ 'LIBS' ] = []
utdataflow_options[ 'LIBPATH' ] = []
utdataflow_options[ 'LIBS' ] += libs
utdataflow_options[ 'LIBPATH' ] += [ install_library_prefix ]
utdataflow_all_options[ 'LIBS' ] += libs
utdataflow_all_options[ 'LIBPATH' ] += [ install_library_prefix ]

# g)
have_utdataflow = libs != 0
Export( 'utdataflow_options', 'have_utdataflow', 'utdataflow_all_options' )

# h)
generateHelp(utdataflow_options)
createVisualStudioProject(env, sources, headers, 'utDataflow')
