import sys
import os.path

Import( '*' )


# HOW TO BUILD (A) LIBRAR-Y/IES FROM A MODULE
# Building libraries from modules should be consistent for each module.
# Use the following scheme for each new library created:
#
# a) Define the src-subdirectories for which the library should be compiled
#    and glob all files in there
# b) Define a [LIBRARY]_options variable for the library containing all dependencies
#    from other libraries. Create a clone from the master environment and add those options.
# c) WINDOWS ONLY: Create a header file which implements dll interface functionality
#    dependent from a [LIBRARY]_DLL define. If the define is set, the dll should be exported,
#    if not, the dll should be imported. Set the define in the preprocessor options for the environment.
# d) Build the library!
# e) Remove all entries for (at least) the LIBS and LIBPATH keys in the options and
#    add only the newly-compiled library as a dependcy. This will avoid multiple includes
#    of libraries. Also verify that the import/export-switch define is not set.
# f) Export the options so that other libraries can base on this library.
#
# The use of options and possibility to export them makes hierarchical build environments
# obsolete. Avoid exporting new environments to the build system.


# a)
subdirs = [ 'utDataflow', 'utGraph', 'utClientServer' ]
headers = globSourceFiles( '*.h' )
sources = globSourceFiles( '*.cpp' )
for dir in subdirs:
	headers += globSourceFiles( dir + '/*.h' )
	sources += globSourceFiles( dir + '/*.cpp' )


# b)	
# setup compiler and linker flags
env = masterEnv.Clone()

extra_options = {}
extra_options[ 'LIBS' ] = boost_libs( [ 'thread', 'system', 'filesystem', 'regex' ] )

# Merge all options in one "ubitrack" option. Note that some options might be empty if its module is not available	
utdataflow_options = mergeOptions( utcore_all_options, extra_options)
# Set ubitrack root source path explicitly that allows sources to access header files relative with #include <..> statements
utdataflow_options ['CPPPATH'] += [ getCurrentPath() ]



env.AppendUnique( **utdataflow_options )

# c)
if sys.platform == 'win32':
	# On windows this statement will help the compiler to realize that it has to _export_ the library instead of importing it
	env.Append( CPPDEFINES = 'UTDATAFLOW_DLL' )

# d)	
libName = 'utDataflow'
libs = setupLibraryBuild(env, sources, libName, 'dataflow')

# e)
# clear all 3rd-party dependencies in the case of linking against ubitrack.dll
utdataflow_all_options = utdataflow_options.copy()
utdataflow_options[ 'LIBS' ] = []
utdataflow_options[ 'LIBPATH' ] = []
# add the ubitrack library to the link options.
utdataflow_options[ 'LIBS' ] += libs
utdataflow_options[ 'LIBPATH' ] += [ install_library_prefix ]

utdataflow_all_options[ 'LIBS' ] += libs
utdataflow_all_options[ 'LIBPATH' ] += [ install_library_prefix ]
# f)
have_utdataflow = True
Export( 'utdataflow_options', 'have_utdataflow', 'utdataflow_all_options' )

# also create a visual studio project for the library	
createVisualStudioProject(env, sources, headers, libName)

# generate short help message on how to build against the library
generateHelp(utdataflow_options)


# return compile status
success = libs
Return ('success')

